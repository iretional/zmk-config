/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define QWTY 0
#define COMK 1
#define SEV 2
#define LWE 3
#define RSE 4
#define THEN 5
#define LOCK 6


#define SH LSHFT 
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE
#define LSP SPACE
#define RSP SPACE
#define CL CAPS
#define P0 KP_N0
#define P1 KP_N1
#define P2 KP_N2
#define P3 KP_N3
#define P4 KP_N4
#define P5 KP_N5
#define P6 KP_N6
#define P7 KP_N7
#define P8 KP_N8
#define P9 KP_N9

#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP
#define CALC C_AL_CALC

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

&mt {
    tapping-term-ms = <200>;
}; 

&sk {
    release-after-ms = <500>;
    quick-release;
}; 

/ {

    backlight: gpioleds {
        compatible = "gpio-leds";
        label = "Backlight LED";
        gpio_led_0 {
            gpios = <&gpio0 9 GPIO_ACTIVE_HIGH>;
            label = "Backlight LED 0";
        };
    };

    behaviors {
        td_comk: tap_dance_comk  {
            compatible = "zmk,behavior-tap-dance";
            label = "tap_dance_comk";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&zed_coleLang>, <&tog COMK>;
        };
        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };
        td_pnq: tap_dance_plus_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PLUS_EQUAL";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp KP_PLUS>, <&kp EQUAL>;
        };
        td_mnc: tap_dance_minus_clear {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MINUS_CLEAR";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp KP_MINUS>, <&kp ESC>;
        };
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };

    
    keymap {
        compatible = "zmk,keymap";

        qwerty_layer { //0
            bindings = <
   &kp GRAVE  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                                          &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
   &mt CL TAB &kp Q     &kp W     &kp E     &kp R     &kp T                                                           &kp Y      &kp U      &kp I      &kp O     &kp P     &kp EQUAL
   &kp LSHFT  &kp A     &kp S     &kp D     &kp F     &kp G                                                           &kp H      &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
   &kp LCTRL  &kp LALT  &kp Z     &kp X     &kp C     &kp V     &mo LWE   &kp LALT              &td_comk   &mo RSE    &kp B      &kp N      &kp M      &kp DOT   &kp FSLH  &kp BSLH   
                        &kp LGUI  &sk LSHFT &kp LSP   &kp BSPC  &kp LCTRL                                  &kp LANG1  &kp RET    &kp RSP    &sk RSHFT  &kp COMMA
            >;
        };

        colemak_layer { //1
            bindings = <
   &trans     &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                                          &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
   &trans     &kp Q     &kp W     &kp F     &kp P     &kp G                                                           &kp J      &kp L      &kp U      &kp Y     &kp SEMI  &kp EQUAL
   &trans     &kp A     &kp R     &kp S     &kp T     &kp D                                                           &kp H      &kp N      &kp E      &kp I     &kp O     &kp SQT
   &trans     &trans    &kp Z     &kp X     &kp C     &kp V     &mo LWE   &trans                &td_comk   &mo RSE    &kp B      &kp K      &kp M      &kp DOT   &kp FSLH  &kp BSLH   
                        &trans    &trans    &trans    &trans    &trans                                     &kp LANG1  &trans     &trans     &trans     &kp COMMA 
            >;
        };
        
        seval_layer { //2
            bindings = <
   &kp GRAVE  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                                          &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
   &mt CL TAB &none     &none     &none     &none     &none                                                           &none      &none      &none      &none     &none     &kp EQUAL
   &kp LSHFT  &none     &none     &none     &none     &none                                                           &none      &none      &none      &none     &none     &kp SQT
   &kp LCTRL  &kp LALT  &none     &none     &none     &none     &mo LWE   &kp LALT              &td_comk   &mo RSE    &none      &none      &none      &none     &kp FSLH  &kp BSLH   
                        &kp LGUI  &kp LSHFT &kp LSP   &kp BSPC  &kp LCTRL                                  &kp LANG1  &kp RET    &kp RSP    &kp RSHFT  &kp COMMA
            >;
        };

        lower_layer { //3
            bindings = <
   &kp ESC   &none        &none        &none        &none      &kp LPAR                                                &kp RPAR     &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_MINUS &td_mnc
   &trans    &none        &kp HOME     &kp UP       &kp END    &kp LBRC                                                &kp RBRC     &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_PLUS  &td_pnq
   &trans    &none        &kp LEFT     &kp DOWN     &kp RIGHT  &kp LBKT                                                &kp RBKT     &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_MUL   &kp CARET
   &trans    &trans       &none        &none        &none      &kp LT    &trans     &trans        &kp KP_NUM &trans    &kp GT       &kp KP_N0 &kp KP_N0 &kp KP_DOT &kp KP_DIV   &kp PRCNT  
                          &trans       &trans       &trans     &kp DEL   &trans                              &kp LANG2 &kp KP_ENTER &trans    &trans    &kp COMMA 
            >;
        };

        raise_layer { //4
                bindings = <
   &kp ESC   &none        &none        &none        &none      &kp LPAR                                                &kp RPAR     &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_MINUS &td_mnc
   &trans    &none        &kp HOME     &kp UP       &kp END    &kp LBRC                                                &kp RBRC     &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_PLUS  &td_pnq
   &trans    &none        &kp LEFT     &kp DOWN     &kp RIGHT  &kp LBKT                                                &kp RBKT     &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_MUL   &kp CARET
   &trans    &trans       &none        &none        &none      &kp LT    &trans     &trans        &kp KP_NUM &trans    &kp GT       &kp KP_N0 &kp KP_N0 &kp KP_DOT &kp KP_DIV   &kp PRCNT  
                          &trans       &trans       &trans     &kp DEL   &trans                              &kp LANG2 &kp KP_ENTER &trans    &trans    &kp COMMA 
            >;
        };

        
        then_layer { //5
            bindings = <
   &kp ESC    &kp F1       &kp F2       &kp F3       &kp F4       &kp F5                                                         &kp F6     &kp F7     &kp F8     &kp F9    &kp F10   &kp F11
   &bt BT_CLR &bt BT0      &bt BT1      &bt BT2      &bt BT3      &bt BT4                                                        &kp VOL_DN &kp VOL_UP &kp C_MUTE &none     &none     &kp F12
   &trans     &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &trans     &trans       &none        &none        &kp CALC     &none     &none     &trans               &none       &none     &BL_TOG    &none      &none      &none     &none     &none
                           &zed_capt    &trans       &trans       &none     &trans                                     &none     &none      &none      &none      &none  
            >;
        };

        lock_layer { //6
            bindings = <
   &none      &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &none      &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &none      &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &none      &none        &none        &none        &none        &none     &none     &none                &none       &none     &none      &none      &none      &none     &none     &none
                           &none        &none        &none        &none     &none                                      &none     &none      &none      &none      &none  
            >;
        }; 
    };

    
    /*      0  1  2  3  4  5                   6  7  8  9  10 11
            12 13 14 15 16 17                  18 19 20 21 22 23
            24 25 26 27 28 29                  30 31 32 33 34 35
            36 37 38 39 40 41 42 43      44 45 46 47 48 49 50 51
                   52 53 54 55 56          57 58 59 60 61               */
                   
    /*      0  1    2    3    4    5                     6   7    8    9   10   11-
            12 ㅂ13 ㅈ14 ㄷ15 ㄱ16 ㅅ17                  18ㅛ 19ㅕ 20ㅑ 21ㅐ 22ㅔ 23=
            24 ㅁ25 ㄴ26 ㅇ27 ㄹ28 ㅎ29                  30ㅗ 31ㅓ 32ㅏ 33ㅣ 34;  35'
            36 37   ㅋ38 ㅌ39 ㅊ40 ㅍ41 42 43      44 45 46ㅠ 47ㅜ 48ㅡ 49.  50/ 51\
                      52 53SH 54LS 55BS 56         57 ET58 RS59 SH60 61,               */
    combos {
        compatible = "zmk,combos";
        // If https://github.com/zmkfirmware/zmk/issues/405 is implemented,
        // this combo can be replaced by a native behavior in the future.
        combo_lock {
          timeout-ms = <3000>;
          key-positions = <0 /* ESC */ 42 /* LOWER */ 45 /* RAISE */>;
          bindings = <&tog LOCK>;
        };
        
        sev_gli {timeout-ms=<4000>;layers=<2>;bindings=<&ko_gkqslek>;key-positions=<20 29 33>;};
    };

    macros {
        zed_capt: zed_capt {
            label = "zed_capt";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_press &kp LGUI>
                , <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp LGUI>
                ;
        };
        zed_coleLang: zed_coleLang {
            label = "zed_coleLang";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &tog COMK &kp LANG1>
                ;
        };

        // <&macro_press &kp LALT> <&macro_release &kp LALT>

        
        /* 바 */ ZMK_MACRO(ko_qk, wait-ms=<20>; tap-ms=<20>; bindings=<&macro_tap &kp Q &kp K>;)

        /* 합니다 */
        ZMK_MACRO(ko_gkqslek, wait-ms=<20>; tap-ms=<20>;
            bindings = <&macro_tap &kp G &kp K &kp Q &kp S &kp L &kp E &kp K &kp DOT>;)


    };
    
};
