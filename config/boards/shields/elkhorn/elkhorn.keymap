/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

#define AS(keycode) &as LS(keycode) keycode     // Autoshift Macro

#define LOWER 1
#define RAISE 2
#define THEN 3
#define LOCK  4


#define SH LSHFT 
#define KP_MUL KP_MULTIPLY
#define KP_DIV KP_DIVIDE

#define VOL_DN C_VOL_DN
#define VOL_UP C_VOL_UP
#define CALC C_AL_CALC

#define BT0 BT_SEL 0
#define BT1 BT_SEL 1
#define BT2 BT_SEL 2
#define BT3 BT_SEL 3
#define BT4 BT_SEL 4

&mt {
    tapping-term-ms = <200>;
}; 

/ {
    behaviors {
        td_par: tap_dance_par {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PAR";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp LPAR>, <&kp RPAR>;
        };
        td_pnq: tap_dance_plus_equal {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_PLUS_EQUAL";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp KP_PLUS>, <&kp EQUAL>;
        };
        td_mnc: tap_dance_minus_clear {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_MINUS_CLEAR";
            #binding-cells = <0>;
            tapping-term-ms = <220>;
            bindings = <&kp KP_MINUS>, <&kp ESC>;
        };
    };
    
    combos {
        compatible = "zmk,combos";
        // If https://github.com/zmkfirmware/zmk/issues/405 is implemented,
        // this combo can be replaced by a native behavior in the future.
        combo_lock {
          timeout-ms = <3000>;
          key-positions = <0 /* ESC */ 42 /* LOWER */ 45 /* RAISE */>;
          bindings = <&tog LOCK>;
        };
    };

    macros {
        zed_capt: zed_capt {
            label = "zed_capt";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_press &kp LSHFT>
                , <&macro_press &kp LGUI>
                , <&macro_tap &kp S>
                , <&macro_release &kp LSHFT>
                , <&macro_release &kp LGUI>
                ;
        };
    };
    
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
            bindings = <
   &kp GRAVE  &kp N1    &kp N2    &kp N3    &kp N4    &kp N5                                                          &kp N6     &kp N7     &kp N8     &kp N9    &kp N0    &kp MINUS
   &mt SH TAB &kp Q     &kp W     &kp E     &kp R     &kp T                                                           &kp Y      &kp U      &kp I      &kp O     &kp P     &kp EQUAL
   &kp LALT   &kp A     &kp S     &kp D     &kp F     &kp G                                                           &kp H      &kp J      &kp K      &kp L     &kp SEMI  &kp SQT
   &kp LCTRL  &kp COMMA &kp Z     &kp X     &kp C     &kp V     &mo 1     &kp LALT              &kp CAPS   &mo 2      &kp B      &kp N      &kp M      &kp DOT   &kp FSLH  &kp BSLH   
                        &kp LGUI  &kp LSHFT &kp SPACE &kp BSPC  &kp LCTRL                                  &kp LANG1  &kp RET    &kp SPACE  &kp RSHFT  &kp LANG1 
            >;
        };

        lower_layer {
            bindings = <
   &kp ESC   &none        &none        &none        &none      &kp LPAR                                                &kp RPAR     &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_MINUS &td_mnc
   &trans    &none        &kp HOME     &kp UP       &kp END    &kp LBRC                                                &kp RBRC     &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_PLUS  &td_pnq
   &trans    &none        &kp LEFT     &kp DOWN     &kp RIGHT  &kp LBKT                                                &kp RBKT     &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_MUL   &kp CARET
   &trans    &trans       &none        &none        &none      &kp LT    &trans     &trans        &kp KP_NUM &trans    &kp GT       &kp KP_N0 &kp KP_N0 &kp KP_DOT &kp KP_DIV   &kp PRCNT  
                          &kp LGUI     &trans       &trans     &kp DEL   &trans                              &kp LANG2 &kp KP_ENTER &trans    &trans    &kp LANG2 
            >;
        };

        raise_layer {
                bindings = <
   &kp ESC   &none        &none        &none        &none      &kp LPAR                                                &kp RPAR     &kp KP_N7 &kp KP_N8 &kp KP_N9  &kp KP_MINUS &td_mnc
   &trans    &none        &kp HOME     &kp UP       &kp END    &kp LBRC                                                &kp RBRC     &kp KP_N4 &kp KP_N5 &kp KP_N6  &kp KP_PLUS  &td_pnq
   &trans    &none        &kp LEFT     &kp DOWN     &kp RIGHT  &kp LBKT                                                &kp RBKT     &kp KP_N1 &kp KP_N2 &kp KP_N3  &kp KP_MUL   &kp CARET
   &trans    &trans       &none        &none        &none      &kp LT    &trans     &trans        &kp KP_NUM &trans    &kp GT       &kp KP_N0 &kp KP_N0 &kp KP_DOT &kp KP_DIV   &kp PRCNT  
                          &kp LGUI     &trans       &trans     &kp DEL   &trans                              &kp LANG2 &kp KP_ENTER &trans    &&trans   &kp LANG2 
            >;
        };

        
        then_layer {
            bindings = <
   &kp ESC    &kp F1       &kp F2       &kp F3       &kp F4       &kp F5                                                         &kp F6     &kp F7     &kp F8     &kp F9    &kp F10   &kp F11
   &bt BT_CLR &bt BT0      &bt BT1      &bt BT2      &bt BT3      &bt BT4                                                        &kp VOL_DN &kp VOL_UP &kp C_MUTE &none     &none     &kp F12
   &trans     &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &trans     &trans       &none        &none        &kp CALC     &none     &none     &trans               &none       &none     &none      &none      &none      &none     &none     &none
                           &zed_capt    &trans       &trans       &none     &trans                                     &none     &none      &none      &none      &none  
            >;
        };

        lock_layer {
            bindings = <
   &none      &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &none      &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &none      &none        &none        &none        &none        &none                                                          &none      &none      &none      &none     &none     &none 
   &none      &none        &none        &none        &none        &none     &none     &none                &none       &none     &none      &none      &none      &none     &none     &none
                           &none        &none        &none        &none     &none                                      &none     &none      &none      &none      &none  
            >;
        };
    };
};
